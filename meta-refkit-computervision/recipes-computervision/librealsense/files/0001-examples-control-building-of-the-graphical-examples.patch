From 7b6134844a57470421ed1552dcc6ce053e6d70a1 Mon Sep 17 00:00:00 2001
From: Ismo Puustinen <ismo.puustinen@intel.com>
Date: Fri, 10 Feb 2017 15:46:23 +0200
Subject: [PATCH] examples: control building of the graphical examples.

The graphical examples require a graphical environment, while the
standard examples can be run in a headless system. Separate the two with
a compile switch. If you want to disable building of the graphical
examples, use

    -DBUILD_GRAPHICAL_EXAMPLES=off

in the cmake command line. By default the graphical examples are built
if BUILD_EXAMPLES is selected, so the default behavior does not change.

Upstream-status: Submitted [https://github.com/IntelRealSense/librealsense/pull/435]

---
 examples/CMakeLists.txt | 173 +++++++++++++++++++++++++++---------------------
 1 file changed, 96 insertions(+), 77 deletions(-)

diff --git a/examples/CMakeLists.txt b/examples/CMakeLists.txt
index 57009d5..3887b93 100644
--- a/examples/CMakeLists.txt
+++ b/examples/CMakeLists.txt
@@ -10,6 +10,10 @@ set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
 # View the makefile commands during build
 #set(CMAKE_VERBOSE_MAKEFILE on)
 
+# This parameter is meant for disabling graphical examples when building for
+# headless targets.
+option(BUILD_GRAPHICAL_EXAMPLES "Build graphical examples." ON)
+
 include(CheckCXXCompilerFlag)
 CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
 CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
@@ -21,73 +25,55 @@ else()
     message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
 endif()
 
-find_package(OpenGL REQUIRED)
-set(DEPENDENCIES realsense ${OPENGL_LIBRARIES})
-
-if(WIN32)
-    add_subdirectory(third_party/glfw)
-    list(APPEND DEPENDENCIES glfw3)
+if(BUILD_GRAPHICAL_EXAMPLES)
+    find_package(OpenGL REQUIRED)
+    set(DEPENDENCIES realsense ${OPENGL_LIBRARIES})
+
+    if(WIN32)
+        add_subdirectory(third_party/glfw)
+        list(APPEND DEPENDENCIES glfw3)
+    else()
+        # Find glfw header
+        find_path(GLFW_INCLUDE_DIR NAMES GLFW/glfw3.h
+            PATHS /usr/X11R6/include
+                  /usr/include/X11
+                  /opt/graphics/OpenGL/include
+                  /opt/graphics/OpenGL/contrib/libglfw
+                  /usr/local/include
+                  /usr/include/GL
+                  /usr/include
+        )
+        # Find glfw library
+        find_library(GLFW_LIBRARIES NAMES glfw glfw3
+                PATHS /usr/lib64
+                      /usr/lib
+                      /usr/lib/${CMAKE_LIBRARY_ARCHITECTURE}
+                      /usr/local/lib64
+                      /usr/local/lib
+                      /usr/local/lib/${CMAKE_LIBRARY_ARCHITECTURE}
+                      /usr/X11R6/lib
+        )
+        list(APPEND DEPENDENCIES m ${GLFW_LIBRARIES} ${LIBUSB1_LIBRARIES})
+        include_directories(${GLFW_INCLUDE_DIR})
+    endif()
 else()
-    # Find glfw header
-    find_path(GLFW_INCLUDE_DIR NAMES GLFW/glfw3.h
-        PATHS /usr/X11R6/include
-              /usr/include/X11
-              /opt/graphics/OpenGL/include
-              /opt/graphics/OpenGL/contrib/libglfw
-              /usr/local/include
-              /usr/include/GL
-              /usr/include
-    )
-    # Find glfw library
-    find_library(GLFW_LIBRARIES NAMES glfw glfw3
-            PATHS /usr/lib64
-                  /usr/lib
-                  /usr/lib/${CMAKE_LIBRARY_ARCHITECTURE}
-                  /usr/local/lib64
-                  /usr/local/lib
-                  /usr/local/lib/${CMAKE_LIBRARY_ARCHITECTURE}
-                  /usr/X11R6/lib
-    )
-    list(APPEND DEPENDENCIES m ${GLFW_LIBRARIES} ${LIBUSB1_LIBRARIES})
-    include_directories(${GLFW_INCLUDE_DIR})
+    set(DEPENDENCIES realsense)
+    if(NOT WIN32)
+        list(APPEND DEPENDENCIES m ${LIBUSB1_LIBRARIES})
+    endif()
 endif()
 
-# C Tutorials
+# C/C++ tutorials and examples
+
 add_executable(c-tutorial-1-depth c-tutorial-1-depth.c)
 target_link_libraries(c-tutorial-1-depth ${DEPENDENCIES})
 
-add_executable(c-tutorial-2-streams c-tutorial-2-streams.c)
-target_link_libraries(c-tutorial-2-streams ${DEPENDENCIES})
-
-add_executable(c-tutorial-3-pointcloud c-tutorial-3-pointcloud.c)
-target_link_libraries(c-tutorial-3-pointcloud ${DEPENDENCIES})
-
-# C++ Tutorials
 add_executable(cpp-tutorial-1-depth cpp-tutorial-1-depth.cpp)
 target_link_libraries(cpp-tutorial-1-depth ${DEPENDENCIES})
 
-add_executable(cpp-tutorial-2-streams cpp-tutorial-2-streams.cpp)
-target_link_libraries(cpp-tutorial-2-streams ${DEPENDENCIES})
-
-add_executable(cpp-tutorial-3-pointcloud cpp-tutorial-3-pointcloud.cpp)
-target_link_libraries(cpp-tutorial-3-pointcloud ${DEPENDENCIES})
-
-# Examples
-add_executable(cpp-alignimages cpp-alignimages.cpp)
-target_link_libraries(cpp-alignimages ${DEPENDENCIES})
-
 add_executable(cpp-callback cpp-callback.cpp)
 target_link_libraries(cpp-callback ${DEPENDENCIES})
 
-add_executable(cpp-callback-2 cpp-callback-2.cpp)
-target_link_libraries(cpp-callback-2 ${DEPENDENCIES})
-
-add_executable(cpp-capture cpp-capture.cpp)
-target_link_libraries(cpp-capture ${DEPENDENCIES})
-
-add_executable(cpp-config-ui cpp-config-ui.cpp)
-target_link_libraries(cpp-config-ui ${DEPENDENCIES})
-
 add_executable(cpp-enumerate-devices cpp-enumerate-devices.cpp)
 target_link_libraries(cpp-enumerate-devices ${DEPENDENCIES})
 
@@ -97,43 +83,76 @@ target_link_libraries(cpp-headless ${DEPENDENCIES})
 add_executable(cpp-motion-module cpp-motion-module.cpp)
 target_link_libraries(cpp-motion-module ${DEPENDENCIES})
 
-add_executable(cpp-multicam cpp-multicam.cpp)
-target_link_libraries(cpp-multicam ${DEPENDENCIES})
+if(BUILD_GRAPHICAL_EXAMPLES)
+    add_executable(c-tutorial-2-streams c-tutorial-2-streams.c)
+    target_link_libraries(c-tutorial-2-streams ${DEPENDENCIES})
+
+    add_executable(c-tutorial-3-pointcloud c-tutorial-3-pointcloud.c)
+    target_link_libraries(c-tutorial-3-pointcloud ${DEPENDENCIES})
+
+    add_executable(cpp-tutorial-2-streams cpp-tutorial-2-streams.cpp)
+    target_link_libraries(cpp-tutorial-2-streams ${DEPENDENCIES})
 
-add_executable(cpp-pointcloud cpp-pointcloud.cpp)
-target_link_libraries(cpp-pointcloud ${DEPENDENCIES})
+    add_executable(cpp-tutorial-3-pointcloud cpp-tutorial-3-pointcloud.cpp)
+    target_link_libraries(cpp-tutorial-3-pointcloud ${DEPENDENCIES})
 
-add_executable(cpp-restart cpp-restart.cpp)
-target_link_libraries(cpp-restart ${DEPENDENCIES})
+    add_executable(cpp-alignimages cpp-alignimages.cpp)
+    target_link_libraries(cpp-alignimages ${DEPENDENCIES})
 
-add_executable(cpp-stride cpp-stride.cpp)
-target_link_libraries(cpp-stride ${DEPENDENCIES})
+    add_executable(cpp-callback-2 cpp-callback-2.cpp)
+    target_link_libraries(cpp-callback-2 ${DEPENDENCIES})
+
+    add_executable(cpp-capture cpp-capture.cpp)
+    target_link_libraries(cpp-capture ${DEPENDENCIES})
+
+    add_executable(cpp-config-ui cpp-config-ui.cpp)
+    target_link_libraries(cpp-config-ui ${DEPENDENCIES})
+
+    add_executable(cpp-multicam cpp-multicam.cpp)
+    target_link_libraries(cpp-multicam ${DEPENDENCIES})
+
+    add_executable(cpp-pointcloud cpp-pointcloud.cpp)
+    target_link_libraries(cpp-pointcloud ${DEPENDENCIES})
+
+    add_executable(cpp-restart cpp-restart.cpp)
+    target_link_libraries(cpp-restart ${DEPENDENCIES})
+
+    add_executable(cpp-stride cpp-stride.cpp)
+    target_link_libraries(cpp-stride ${DEPENDENCIES})
+
+    install(
+        TARGETS
+        c-tutorial-2-streams
+        c-tutorial-3-pointcloud
+
+        cpp-tutorial-2-streams
+        cpp-tutorial-3-pointcloud
+
+        cpp-alignimages
+        cpp-callback-2
+        cpp-capture
+        cpp-config-ui
+        cpp-multicam
+        cpp-pointcloud
+        cpp-restart
+        cpp-stride
+
+        RUNTIME DESTINATION
+        ${CMAKE_INSTALL_BINDIR}
+    )
+endif()
 
 install(
     TARGETS
     c-tutorial-1-depth
-    c-tutorial-2-streams
-    c-tutorial-3-pointcloud
 
     cpp-tutorial-1-depth
-    cpp-tutorial-2-streams
-    cpp-tutorial-3-pointcloud
 
-    cpp-alignimages
     cpp-callback
-    cpp-callback-2
-    cpp-capture
-    cpp-config-ui
     cpp-enumerate-devices
     cpp-headless
     cpp-motion-module
-    cpp-multicam
-    cpp-pointcloud
-    cpp-restart
-    cpp-stride
 
     RUNTIME DESTINATION
     ${CMAKE_INSTALL_BINDIR}
 )
-
-
-- 
2.9.3

